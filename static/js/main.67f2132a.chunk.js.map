{"version":3,"sources":["Map.jsx","Container.jsx","serviceWorker.js","index.js"],"names":["script","document","createElement","src","process","defer","async","head","appendChild","Map","center","zoom","markers","useState","mapElement","setMapElement","map","setMap","googleMarkers","setGoogleMarkers","showMarkers","setShowMarkers","showPanel","setShowPanel","firstUpdate","useRef","useLayoutEffect","getElementById","current","window","initMap","initialMap","google","maps","forEach","position","title","newGoogleMarkersArray","googleMarker","Marker","push","console","error","useEffect","className","type","style","onClick","setCenter","setZoom","id","Container","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"gyBAOMA,G,MAASC,SAASC,cAAc,WACtCF,EAAOG,IAAP,sDAA4DC,0CAA5D,qBACAJ,EAAOK,OAAQ,EACfL,EAAOM,OAAQ,EAKfL,SAASM,KAAKC,YAAYR,GA0HXS,MAxHf,YAAyC,IAA1BC,EAAyB,EAAzBA,OAAQC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,QAAW,EACFC,mBAAS,MADP,mBAC/BC,EAD+B,KACnBC,EADmB,OAEhBF,mBAAS,MAFO,mBAE/BG,EAF+B,KAE1BC,EAF0B,OAGIJ,mBAAS,IAHb,mBAG/BK,EAH+B,KAGhBC,EAHgB,OAIAN,oBAAS,GAJT,mBAI/BO,EAJ+B,KAIlBC,EAJkB,OAKJR,oBAAS,GALL,mBAK/BS,EAL+B,KAKpBC,EALoB,KAMhCC,EAAcC,kBAAO,GAkC3B,OAhCAC,2BAAgB,WACdX,EAAcd,SAAS0B,eAAe,QAClCH,EAAYI,QACdJ,EAAYI,SAAU,EACZd,EAGVe,OAAOC,QAAU,WACf,IAAMC,EAAa,IAAIC,OAAOC,KAAKxB,IAAIK,EAAY,CACjDJ,SACAC,SAEFM,EAAOc,GACPnB,EAAQsB,SAAQ,YAA0B,IAAvBC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,MACrBC,EAAwBnB,EACxBoB,EAAe,IAAIN,OAAOC,KAAKM,OAAO,CAAEJ,WAAUC,UACpDhB,GACFkB,EAAarB,OAAOc,GAEtBM,EAAsBG,KAAKF,GAC3BnB,EAAiBkB,OAfrBI,QAAQC,MAAM,qBAmBf,CAAC5B,EAAYJ,EAAQC,EAAMC,IAE9B+B,qBAAU,WACRzB,EAAcgB,SAAQ,SAACI,GACrBA,EAAarB,OAAOG,EAAcJ,EAAM,WAEzC,CAACI,IAGF,yBAAKwB,UAAU,iBACb,4BACEA,UAAU,eACVC,KAAK,SACLC,MAAO,CAAE,eAAgBxB,EAAY,EAAI,GACzCyB,QAAS,kBAAMxB,GAAcD,KAE5BA,EACC,0BAAMsB,UAAU,kBAAhB,uBAEA,0BAAMA,UAAU,kBAAhB,yBAGHtB,GACC,yBACEsB,UAAU,aACVE,MAAO,CAAE,eAAgBxB,EAAY,EAAI,IAEzC,yBAAKsB,UAAU,qBACb,wBAAIA,UAAU,sBAAd,WACA,4BACEA,UAAU,sBACVC,KAAK,SACLT,MAAM,WACNW,QAAS,kBAAM1B,GAAgBD,KAE9BA,EACC,0BAAMwB,UAAU,6BAAhB,gBAEA,0BAAMA,UAAU,4BAAhB,iBAIN,wBAAIA,UAAU,mBACXhC,EAAQI,KAAI,gBAAGoB,EAAH,EAAGA,MAAOD,EAAV,EAAUA,SAAV,OACX,wBAAIS,UAAU,kBACXR,EACD,yBAAKQ,UAAU,kBACb,4BACEA,UAAU,gBACVC,KAAK,SACLT,MAAM,KACNW,QAAS,WACP/B,EAAIgC,UAAUb,GACdnB,EAAIiC,QAAQ,MAGd,0BAAML,UAAU,kBAAhB,gCAQd,yBAAKM,GAAG,U,aCpGCC,MARf,WACE,OACE,yBAAKP,UAAU,aACb,kBAAC,EAAD,CAAKlC,OAAQA,IAAQC,KAAM,EAAGC,QAASA,QCKzBwC,QACW,cAA7BvB,OAAOwB,SAASC,UAEe,UAA7BzB,OAAOwB,SAASC,UAEhBzB,OAAOwB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFzD,SAAS0B,eAAe,SDyHpB,kBAAmBgC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACvB,GACND,QAAQC,MAAMA,EAAMwB,c","file":"static/js/main.67f2132a.chunk.js","sourcesContent":["/* global google */\nimport React, { useState, useEffect, useRef, useLayoutEffect } from 'react';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport PropTypes from 'prop-types';\nimport './Map.css';\n\n// Create the script tag, set the appropriate attributes\nconst script = document.createElement('script');\nscript.src = `https://maps.googleapis.com/maps/api/js?key=${process.env.REACT_APP_MAPS_APIKEY}&callback=initMap`;\nscript.defer = true;\nscript.async = true;\n\n// Attach your callback function to the `window` object\n\n// Append the 'script' element to 'head'\ndocument.head.appendChild(script);\n\nfunction Map({ center, zoom, markers }) {\n  const [mapElement, setMapElement] = useState(null);\n  const [map, setMap] = useState(null);\n  const [googleMarkers, setGoogleMarkers] = useState([]);\n  const [showMarkers, setShowMarkers] = useState(true);\n  const [showPanel, setShowPanel] = useState(true);\n  const firstUpdate = useRef(true);\n\n  useLayoutEffect(() => {\n    setMapElement(document.getElementById('map'));\n    if (firstUpdate.current) {\n      firstUpdate.current = false;\n    } else if (!mapElement) {\n      console.error('No map element!');\n    } else {\n      window.initMap = () => {\n        const initialMap = new google.maps.Map(mapElement, {\n          center,\n          zoom,\n        });\n        setMap(initialMap);\n        markers.forEach(({ position, title }) => {\n          const newGoogleMarkersArray = googleMarkers;\n          const googleMarker = new google.maps.Marker({ position, title });\n          if (showMarkers) {\n            googleMarker.setMap(initialMap);\n          }\n          newGoogleMarkersArray.push(googleMarker);\n          setGoogleMarkers(newGoogleMarkersArray);\n        });\n      };\n    }\n  }, [mapElement, center, zoom, markers]);\n\n  useEffect(() => {\n    googleMarkers.forEach((googleMarker) => {\n      googleMarker.setMap(showMarkers ? map : null);\n    });\n  }, [showMarkers]);\n\n  return (\n    <div className=\"map-container\">\n      <button\n        className=\"panel-button\"\n        type=\"button\"\n        style={{ '--showButton': showPanel ? 1 : 0 }}\n        onClick={() => setShowPanel(!showPanel)}\n      >\n        {showPanel ? (\n          <span className=\"material-icons\">keyboard_arrow_left</span>\n        ) : (\n          <span className=\"material-icons\">keyboard_arrow_right</span>\n        )}\n      </button>\n      {showPanel && (\n        <div\n          className=\"left-panel\"\n          style={{ '--showButton': showPanel ? 1 : 0 }}\n        >\n          <div className=\"left-panel-header\">\n            <h2 className=\"panel-header-title\">Markers</h2>\n            <button\n              className=\"panel-header-button\"\n              type=\"button\"\n              title=\"Hide All\"\n              onClick={() => setShowMarkers(!showMarkers)}\n            >\n              {showMarkers ? (\n                <span className=\"material-icons marker-off\">location_off</span>\n              ) : (\n                <span className=\"material-icons marker-on\">location_on</span>\n              )}\n            </button>\n          </div>\n          <ul className=\"markers-display\">\n            {markers.map(({ title, position }) => (\n              <li className=\"marker-display\">\n                {title}\n                <div className=\"marker-options\">\n                  <button\n                    className=\"marker-option\"\n                    type=\"button\"\n                    title=\"Go\"\n                    onClick={() => {\n                      map.setCenter(position);\n                      map.setZoom(10);\n                    }}\n                  >\n                    <span className=\"material-icons\">keyboard_arrow_right</span>\n                  </button>\n                </div>\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n      <div id=\"map\" />\n    </div>\n  );\n}\n\nMap.propTypes = {\n  center: PropTypes.shape({\n    lat: PropTypes.number.isRequired,\n    lng: PropTypes.number.isRequired,\n  }).isRequired,\n  zoom: PropTypes.number.isRequired,\n  markers: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      position: PropTypes.shape({\n        lat: PropTypes.number.isRequired,\n        lng: PropTypes.number.isRequired,\n      }).isRequired,\n      title: PropTypes.string.isRequired,\n      visible: PropTypes.bool.isRequired,\n    }),\n  ).isRequired,\n};\n\nexport default Map;\n","import React from 'react';\nimport Map from './Map';\nimport { center, markers } from './testData.json';\nimport './Container.css';\n\nfunction Container() {\n  return (\n    <div className=\"container\">\n      <Map center={center} zoom={6} markers={markers} />\n    </div>\n  );\n}\n\nexport default Container;\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","/* eslint-disable react/jsx-filename-extension */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Container from './Container';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Container />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}